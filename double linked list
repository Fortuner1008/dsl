#include <iostream>
#include <cmath>
using namespace std;

struct Node {
    int bit;
    Node* prev;
    Node* next;
};

class BinaryNumber {
private:
    Node* head;
    Node* tail;

public:
    BinaryNumber() {
        head = tail = nullptr;
    }

    void append(int bit) {
        Node* newNode = new Node{bit, nullptr, nullptr};
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->bit;
            temp = temp->next;
        }
        cout << endl;
    }

    void onesComplement() {
        Node* temp = head;
        while (temp) {
            temp->bit = 1 - temp->bit;
            temp = temp->next;
        }
    }

    void twosComplement() {
        onesComplement();
        Node* temp = tail;
        int carry = 1;
        while (temp && carry) {
            int sum = temp->bit + carry;
            temp->bit = sum % 2;
            carry = sum / 2;
            temp = temp->prev;
        }
        if (carry) {
            Node* newNode = new Node{carry, nullptr, head};
            head->prev = newNode;
            head = newNode;
        }
    }

    BinaryNumber add(BinaryNumber& other) {
        BinaryNumber result;
        Node* p1 = tail;
        Node* p2 = other.tail;
        int carry = 0;

        while (p1 || p2 || carry) {
            int bit1 = p1 ? p1->bit : 0;
            int bit2 = p2 ? p2->bit : 0;
            int sum = bit1 + bit2 + carry;
            result.append(sum % 2);
            carry = sum / 2;
            if (p1) p1 = p1->prev;
            if (p2) p2 = p2->prev;
        }

        Node* temp = result.head;
        result.head = result.tail;
        result.tail = temp;
        while (temp) {
            Node* nextTemp = temp->prev;
            temp->prev = temp->next;
            temp->next = nextTemp;
            temp = temp->prev;
        }

        return result;
    }
};

int main() {
    BinaryNumber bin1, bin2;
    int n, bit;

    cout << "Enter the number of bits for first binary number: ";
    cin >> n;
    cout << "Enter the binary number bit by bit:\n";
    for (int i = 0; i < n; i++) {
        cin >> bit;
        bin1.append(bit);
    }

    cout << "Enter the number of bits for second binary number: ";
    cin >> n;
    cout << "Enter the binary number bit by bit:\n";
    for (int i = 0; i < n; i++) {
        cin >> bit;
        bin2.append(bit);
    }

    cout << "\nFirst Binary Number: ";
    bin1.display();

    cout << "\nSecond Binary Number: ";
    bin2.display();

    cout << "\n1's Complement of First Binary Number: ";
    bin1.onesComplement();
    bin1.display();

    cout << "\n2's Complement of First Binary Number: ";
    bin1.twosComplement();
    bin1.display();

    cout << "\nAddition of the Two Binary Numbers: ";
    BinaryNumber result = bin1.add(bin2);
    result.display();

    return 0;
}
